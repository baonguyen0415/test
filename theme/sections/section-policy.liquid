<link rel="stylesheet" href="{{'section-policy.css' | asset_url}}" media="print" onload="this.media='all'">

{%- liquid
  assign bg_class = ''
  assign limit = section.settings.limit
  assign dots  = section.settings.dots
  assign loop  = section.settings.loop
  assign controls = section.settings.controls
  assign autoplay = section.settings.autoplay
  assign collection = collections[section.settings.collection]
  assign sectionID  = '#section-' | append: section.id
  assign items_resp = section.settings.items_resp
  assign controls_id = '#controls-' | append: section.id
  assign items_spacing = '0'
  assign autoplay_timeout = section.settings.autoplay_timeout
  assign slider_id = '#slider-' | append: section.id

  assign layout = section.settings.layout
  if layout == 'boxed'
    assign layout_class = 'container'
  else
    assign layout_class = 'container-fluid'
  endif

  if limit == 0
    assign limit = collection.all_products_count
  endif
-%}

{%- capture gridClass -%}{%- render 'set-item-per-row', value: items_resp -%}{%- endcapture -%}

<div class="section-policy" id="section-{{section.id}}" data-section-id="{{section.id}}" data-section-type="featured-collection">
  <div class="{% if template == 'index' %}{{ layout_class }}{% endif %}">
    <div class="section-wrapper">

      <div class="section-body policy-list style-{{ section.settings.style }}">
        <slider-component>
          <div class="slider-container js-slider-container">
            <div class="slider-wrapper">
              <div class="slider-list" id="slider-{{section.id}}">
                {%- for block in section.blocks -%}
                  {%- assign svg = block.settings.svg -%}
                  {%- assign image = block.settings.image -%}
                  {%- assign heading = block.settings.heading -%}
                  {%- assign subheading = block.settings.subheading -%}

                  <div class="slider-item">
                    <div class="item">
                      {%- if svg != blank or image != blank -%}
                        <div class="image">
                          {%- if svg == blank -%}
                          {%- render 'image-style' image: image, limit: 100 -%}
                          {%- else -%}
                          {{ svg }}
                          {%- endif -%}
                        </div>
                      {%- endif -%}

                      <div class="text">
                        {%- unless heading == blank -%}<h6>{{ heading }}</h6>{%- endunless -%}
                        {%- unless subheading == blank -%}<span>{{ subheading }}</span>{%- endunless -%}
                      </div>
                    </div>
                  </div>

                {%- endfor -%}
              </div>

              {%- render 'set-tns-config'
                loop: loop,
                dots: dots,
                padding: items_spacing,
                classID: sectionID,
                controls: controls,
                autoplay: autoplay,
                slider_id  : slider_id,
                total_item : limit,
                items_resp : items_resp,
                controls_id: controls_id,
                customControls  : true,
                autoplay_timeout: autoplay_timeout,
              -%}

            </div>
          </div>
        </slider-component>
      </div>
    </div>
  </div>
</div>

<script>
  window.theme = window.theme || {};
  if(!!window.theme.sectionRegister){
    !window.theme.sectionRegister.includes("featured-collection") && (window.theme.sectionRegister = [...window.theme.sectionRegister, "featured-collection"]);
  }else{
    window.theme.sectionRegister = ["featured-collection"];
  }
</script>

<script>
  window.theme = window.theme || {};
  if(!!window.theme.customElementsList){
    !window.theme.customElementsList.includes("slider-component") && (window.theme.customElementsList = [...window.theme.customElementsList, "slider-component"]);
  }else{
    window.theme.customElementsList = ["slider-component"];
  }
</script>

{%- capture section_css -%}
{%- render 'snippet-theme' type: 'section-style', preClassID: sectionID, classID: bg_class, config: section.settings -%}
{%- endcapture -%}
{%- style -%}{{section_css | strip | strip_newlines | remove: '  ' }}{%- endstyle -%}
{%- schema -%}
{
  "name": "t:sections.policy.name",
  "tag": "section",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.policy.settings.created_by"
    },
    {
      "type": "header",
      "content": "t:sections.common.general"
    },
    {
      "type": "select",
      "id": "layout",
      "label": "t:sections.common.layout_mode",
      "default": "boxed",
      "options": [
        {
          "value": "boxed",
          "label": "Boxed"
        },
        {
          "value": "full",
          "label": "Wide"
        }
      ]
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "t:sections.common.background_color"
    },
    {
      "type": "text",
      "id": "margin",
      "label": "t:sections.common.section_margin",
      "info": "t:sections.common.order_info",
      "placeholder": "t:sections.common.order_placeholder"
    },
    {
      "type": "text",
      "id": "padding",
      "label": "t:sections.common.section_padding",
      "info": "t:sections.common.order_info",
      "placeholder": "t:sections.common.order_placeholder"
    },
    {
      "type": "header",
      "content": "t:sections.common.layout_settings"
    },
    {
      "type": "text",
      "id": "items_resp",
      "label": "t:sections.common.items_per_row",
      "default": "6,5,3,2"
    },
    {
      "type": "range",
      "id": "limit",
      "label": "t:sections.common.limit",
      "step": 1,
      "min": 1,
      "max": 20,
      "default": 10
    }, 
    {
      "type": "header",
      "content": "t:sections.common.slider_settings"
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "t:sections.common.loop",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "controls",
      "label": "t:sections.common.controls",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "dots",
      "label": "t:sections.common.dots",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "t:sections.common.autoplay",
      "default": false
    },
    {
      "type": "range",
      "id": "autoplay_timeout",
      "label": "t:sections.common.autoplay_timeout",
      "step": 0.1,
      "min": 2,
      "max": 10,
      "unit": "s",
      "default": 4
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "t:sections.common.block_item",
      "settings": [
        {
          "type": "textarea",
          "id": "svg",
          "label": "t:sections.common.svg"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.common.image"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "t:sections.common.heading",
          "default": "Heading"
        },
        {
          "type": "text",
          "id": "subheading",
          "label": "t:sections.common.subheading",
          "default": "Subheading"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "t:sections.policy.name"
    }
  ]
}
{%- endschema -%}